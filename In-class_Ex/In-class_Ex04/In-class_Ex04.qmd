---
title: "In-class Exercise 4"
author: Kwok Pei Shan
date: "May 4, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# Visual Statistical Analysis

(continue from Hands-on Ex4a)

## Install R packages

```{r}
pacman::p_load(tidyverse, ggstatsplot) 
```

`tidyr`, `dplyr`, `ggplot2`, `readr` is all part of tidyverse package.

## Load Data

```{r}
exam <- read_csv('data/Exam_data.csv', show_col_types = FALSE)
```

## Visualisations using `ggstatsplot`

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "parametric", 
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)

#student t-test
#blue dashed line represent Mean
```

```{r}
#type = "non-parametric"

set.seed(1234)

p <- gghistostats(
  data = exam,
  x = ENGLISH,
  type = "np", 
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = FALSE,
  normal.curve.args = list(linewidth = 2),
  xlab = "English scores"
)

p

#Wilcoxon test
#blue dashed line represents Median
```

```{r}
extract_stats(p)
```

`type = "robust"`

-   uses bootstrap method to calculate test statistic

-   blue dashed line: shows trimmed because it removes outliers

`type = "bayes"`

-   blue dashed line: MAP - using simulated values and not raw data

try putting `normal.curve = TRUE` (default is FALSE)

```{r}
#type = "bayes"
#normal.curve = TRUE with line width = 0.5

set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes", 
  test.value = 60,
  bin.args = list(color = "black",
                  fill = "grey50",
                  alpha = 0.7),
  normal.curve = TRUE,
  normal.curve.args = list(linewidth = 0.5),
  xlab = "English scores"
)
```

```{r}
ggdotplotstats(
  data = exam,
  x = ENGLISH,
  y = CLASS,
  title = "",
  xlab = ""
)
```

Does sorting based on English scores, and adds in average line

The above dot plot shows that class 3D actually did better than class 3C in English.

```{r}
exam_long <- exam %>%
  pivot_longer(
    cols = ENGLISH:SCIENCE,
    names_to = "SUBJECT",
    values_to = "SCORES") %>%
  filter(CLASS == "3A")
```

```{r}
ggwithinstats(
  data = filter(exam_long,
                SUBJECT %in%
                  c("MATHS", "SCIENCE")),
  x = SUBJECT,
  y = SCORES,
  type = "p"
)
```

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = TRUE, 
  label.var = ID,
  label.expression = ENGLISH > 90 & MATHS > 90,
)

#try marginal = FALSE
#label.var: means label.variable
#pick up student ID of students where ENGLISH > 90 and MATHS > 90. 
#using Pearson correlation because both variables are continuous. 
#student t-test since type = parametric (using default value since it's not specified)
```

Focus for today: `performance` package of [easystats](https://easystats.github.io/easystats/)

# Visualising Models

(continue from Hands-on Ex4b)

## Visualising Regression Parameters

```{r}
#| eval: false

t <- parameters(model1)
```

# Funnel Plots for Fair Comparison

(continue from Hands-on Ex4c)

Funnel plot gives us a framework to do comparison.
