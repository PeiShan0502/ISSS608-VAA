---
title: "Hands-on Exercise 2: Beyond ggplot2 Fundamentals"
author: "Kwok Pei Shan"
date: "April 14, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## **Overview**

In this chapter, we will use several ggplot2 extensions for creating more elegant and effective statistical graphics. By the end of this exercise, we will:

-   control the placement of annotation on a graph by using functions provided in ggrepel package,

-   create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,

-   plot composite figure by combining ggplot2 graphs by using patchwork package.

## **Getting started**

### **2.2.1 Installing and loading the required libraries**

In this exercise, beside tidyverse, four R packages will be used. They are:

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.

```{r}
pacman::p_load(tidyverse, ggrepel, ggthemes, hrbrthemes, patchwork)
```

### **Importing data**

For the purpose of this exercise, a data file called *Exam_data* will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.

The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package. **readr** is one of the tidyverse package.

Recall: we use read_csv() so that the output will be a tibble data frame (which is easier to work with because the column names are retained!)

```{r}
exam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE)
```

-   The categorical attributes are: ID, CLASS, GENDER and RACE.

-   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

## **Beyond ggplot2 Annotation: ggrepel**

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

<p style="color:red;">

Note to self: find out how to do panel tabset here

</p>

```{r}
ggplot(data=exam_data,
       aes(x=MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5) +
  geom_label(aes(label=ID),
             hjust = 0.5,
             vjust = -0.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle('English scores versus Maths scores for Primary 3')

```

ggrepel is an extension of ggplot2 package which provides `geoms` for **ggplot2** to repel overlapping text as shown in the plot above.

We simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

### **Working with ggrepel**

Using [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html)

```{r}
ggplot(data = exam_data,
       aes(x=MATHS,
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              size = 0.5) +
  geom_label_repel(aes(label=ID),
                   fontface='bold') +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle('English scores vs Maths scores for Primary 3')
```

Compare with [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html)

```{r}
ggplot(data = exam_data,
       aes(x=MATHS,
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              size = 0.5) +
  geom_text_repel(aes(label=ID),
                   fontface='bold') +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle('English scores vs Maths scores for Primary 3')
```

## **Beyond ggplot2 Themes**

ggplot2 comes with eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html), they are: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void()`.

```{r}
ggplot(data = exam_data,
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 boundary = 100,
                 color='grey25',
                 fill='grey90') +
  theme_gray() +
  ggtitle("Distribution of Maths scores")
```

Refer to this [link](https://ggplot2.tidyverse.org/reference/#themes) to learn more about ggplot2 Themes.

### **Working with ggtheme package**

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/) provides [‘ggplot2’ themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots by Edward Tufte, Stephen Few, [Fivethirtyeight](https://fivethirtyeight.com/), [The Economist](https://www.economist.com/graphic-detail), ‘Stata’, ‘Excel’, and [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/), among others.

In the example below, *The Economist* theme is used.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

It also provides some extra geoms and scales for ‘ggplot2’. Consult [this vignette](https://mran.microsoft.com/snapshot/2016-12-28/web/packages/ggthemes/vignettes/ggthemes.html) to learn more.

### **Working with hrbthemes package**

[**hrbrthemes**](https://cinc.rud.is/web/packages/hrbrthemes/) package provides a base theme that focuses on typographic elements, including [where various labels are placed]{.underline} and the [fonts that are used]{.underline}.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "N")
```

From the code above:

-   `axis_title_size` argument is used to increase the font size of the axis title to 18,

-   `base_size` argument is used to increase the default axis label to 15, and

-   `grid` argument is used to remove the x-axis grid lines.

## **Beyond Single Graph**

It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions that provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs.

First, let us create three statistical graphics by using the code chunk below.

```{r}
#Plot 1: Distribution of Maths scores
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p1

```

```{r}
#Plot 2: Distribution of English scores
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

p2
```

Lastly, we will draw a scatterplot for English score versus Maths score by as shown below:

```{r}
# Plot 3: English scores vs Maths scores
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

p3
```

### **Creating Composite Graphics: pathwork methods**

There are several ggplot2 extension functions that support the needs to prepare composite figure by combining several graphs such as [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/) package.

In this section, we are going to use a ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/) which is

<p style="color:red;">

specially designed for combining separate ggplot2 graphs into a single figure

</p>

.

Patchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.

-   Parenthesis () to create a subplot group.

-   Two-Row Layout using the Division Sign `/`

### **Combining two ggplot2 graphs**

The figures below shows a composite of two histograms created using the [**patchwork**](https://patchwork.data-imaginist.com/) package:

```{r}
p1 + p2
```

### **Combining three ggplot2 graphs**

We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

-   “\|” operator to place the plots beside each other,

-   “/” operator to stack two ggplot2 graphs,

-   “()” operator the define the sequence of the plotting.

```{r}
(p1 / p2) | p3
```

To learn more about this, refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html).

### **Creating a composite figure with auto-tag**

In order to identify subplots in text, **patchwork** also provides auto-tagging capabilities as shown in the figure below.

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

Other examples which I tried for fun:

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = '1')
```

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'a')
```

### **Creating figure with `inset_element()`**

Besides providing functions to place plots next to each other based on the provided layout. With [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, we can place one or several plots or graphic elements freely on top or below another plot.

```{r}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

### **Creating a composite figure by using patchwork and ggthemes**

The figure below is created by combining patchwork and `theme_economist()` of ggthemes package discussed earlier.

```{r}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

<p style="color:red;"> Note: how to adjust the axis title size and axis label size, so that the plots appear nicely...?</p>

Trying callout tip:

```{::: {.callout-tip}
## Tip with Title

This is an example of a callout with a title.
:::
```

```{::: {.callout-tip title="Tip with Title"}
This is a callout with a title.
:::
```
