---
title: "Take-home Exercise 3"
author: Kwok Pei Shan
date: "May 22, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## Getting Started

The code chunk below loads the necessary R packages for this take-home exercise:

```{r}
pacman::p_load(jsonlite, tidygraph, ggraph,
               visNetwork, graphlayouts, ggforce,
               skimr, tidytext, tidyverse)
```

## Importing Graph Data

In the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC3.json* into R environment.

```{r}
mc3_data <- fromJSON("data/mc3_cleaned.json")
```

```{r}
class(mc3_data)
```

mc3 data is a directed multigraph with nodes and links. As shown by the output of the code chunk above, they are stored as lists instead of vector columns.

## **Wrangling and tidying edges**

### **Extracting edges**

The code chunk below will be used to extract the links data frame of mc3_data and save it as a tibble data frame called mc3_edges:

```{r}
mc3_edges <- as_tibble(mc3_data$links) %>%
  distinct() %>%
  mutate(source = as.character(source),
         target = as.character(target),
         type = as.character(type)) %>%
  group_by(source, target, type) %>%
  filter(source != target) %>%
  ungroup()
```

::: callout-note
-   `distinct()` is used to ensure that there will be no duplicated records.

-   `mutate()` and `as.character()` are used to convert the field data type from list to character.

-   the `filter(source != target)` is to ensure that no record with similar source and target.
:::

Next, `glimpse()` of dplyr will be used to reveal the structure of *mc3_edges* tibble data frame:

```{r}
glimpse(mc3_edges)
```

::: callout-note
From the table above, the following data issues can be identified:

-   `start_date`, `_last_edited_date`, `_date_added` ,and `end_date` should be in date data type. Currently they are in character data type.

-   Some field names start with "`_`", they need to be renamed in order to avoid unnecessary coding issue in the later tasks.
:::

### **Correcting date data type in `mc3_edges`**

In the code chunk below, `as_datetime()` of **lubridate** package is used to convert fields with character date into **POSIXt** format.

```{r}
mc3_edges$start_date <- as_datetime(mc3_edges$start_date)
mc3_edges$`_last_edited_date`<- as_datetime(mc3_edges$`_last_edited_date`)
mc3_edges$`_date_added`<- as_datetime(mc3_edges$`_date_added`)
mc3_edges$end_date <- as_datetime(mc3_edges$end_date)
```

### **Changing field names in `mc3_edges`**

In the code chunk below, `rename()` of **dplyr** package is used to change the following fields.

```{r}
mc3_edges <- mc3_edges %>%
  rename("last_edited_by" = "_last_edited_by",
         "last_edited_date" = "_last_edited_date",
         "date_added" = "_date_added",
         "raw_source" = "_raw_source",
         "algorithm" = "_algorithm")
```

We further examine the edges, particularly the *type* field, and we can see that most of the edges are either Shareholdership or BeneficialOwnership. FamilyRelationship has the least of all.

```{r}
ggplot(data = mc3_edges, aes(x = type)) +
  geom_bar()
```

We remove some columns in mc3_edges that won't be needed for this analysis:

```{r}
mc3_edges1 <- subset(mc3_edges, select = -c(last_edited_by, last_edited_date, date_added, raw_source, algorithm, key))
```

## **Wrangling and tidying nodes**

### **Extracting nodes**

The code chunk below will be used to extract the *nodes* data.frame of *mc3_data* and parses it as a tibble data.frame called *mc3_nodes*.

```{r}
mc3_nodes <- as_tibble(mc3_data$nodes) %>%
  distinct() %>%
  mutate(country = as.character(country),
         id = as.character(id), 
         ProductServices = as.character(ProductServices),
         type = as.character(type))
```

Next, the code chunk below is used to reveal the data structure of *mc3_nodes* tibble data.frame.

```{r}
glimpse(mc3_nodes)
```

::: callout-note
From the above output:

-   `founding_date`, `_last_edited_date` , `_date_added` , `dob` should be in the date data type, currently it's character data type.

-   Some field names start with "`_`", they need to be renamed in order to avoid unnecessary coding issue in the later tasks.
:::

### **Correcting date data type in `mc3_nodes`**

In the code chunk below, `as_datetime()` of **lubridate** package is used to convert fields with character date into **POSIXt** format.

```{r}
mc3_nodes$founding_date <- as_datetime(mc3_nodes$founding_date)
mc3_nodes$`_last_edited_date`<- as_datetime(mc3_nodes$`_last_edited_date`)
mc3_nodes$`_date_added`<- as_datetime(mc3_nodes$`_date_added`)
mc3_nodes$dob <- as_datetime(mc3_nodes$dob)
```

### **Changing field names in `mc3_nodes`**

In the code chunk below, `rename()` of **dplyr** package is used to change the following fields.

```{r}
mc3_nodes<- mc3_nodes %>%
  rename("last_edited_by" = "_last_edited_by",
         "last_edited_date" = "_last_edited_date",
         "date_added" = "_date_added",
         "raw_source" = "_raw_source",
         "algorithm" = "_algorithm")
```

Furthermore, in case there are some nodes featured in the edges but not in the nodes from the mc3 list object. For consistency, we will combine both sets of nodes to give the complete nodes df.

```{r}
# extract all nodes from edges
id1 <- mc3_edges %>%
  select(source) %>%
  rename(id = source)

id2 <- mc3_edges %>%
  select(target) %>%
  rename(id = target)

additional_nodes <- rbind(id1, id2) %>%
  distinct() %>%
  filter(!id %in% mc3_nodes[["id"]])
```

```{r}
#combine all nodes
mc3_nodes1 <- rbind(mc3_nodes, additional_nodes) %>%
  distinct()
```

We further examine the nodes below, particularly the *type* field, and we can see that most of the nodes are persons (51,649 nodes):

```{r}
ggplot(data = mc3_nodes1, aes(x = type)) +
  geom_bar()
```

## **Check for duplicate nodes**

The output of the code chunk below confirms that there are no duplicated nodes with the same id:

```{r}
mc3_nodes1[duplicated(mc3_nodes1$id), ] %>%
  arrange(id)
```

## **Cleaning up ProductServices in nodes**

We note that only nodes of type Organisation have meaningful description for ProductServices, and for nodes of type Person, the ProductServices field has missing values. The same can be said for the following fields: PointOfContact, HeadOfOrg, founding_date, revenue, TradeDescription.

```{r}
print(sum(is.na(mc3_nodes1$ProductServices)))
print(sum(is.na(mc3_nodes1$PointOfContact)))
print(sum(is.na(mc3_nodes1$HeadOfOrg)))
print(sum(is.na(mc3_nodes1$founding_date)))
print(sum(is.na(mc3_nodes1$revenue)))
print(sum(is.na(mc3_nodes1$TradeDescription)))

```

The above output also shows that PointOfContact and revenue seems to also be missing for some organisations.

For this reason, we will only use the ProductServices column for nodes that are organisations:

```{r}
# extract type that contains "Entity.Organization"
org_nodes <- mc3_nodes1 %>%
  filter(str_detect(type, "Entity.Organization"))

# extract type that contains "Entity.Person"
person_nodes <- mc3_nodes1 %>%
  filter(str_detect(type, "Entity.Person"))

# Person_nodes that have meaningful ProductServices
person_nodes_w_pdt_services <- person_nodes %>%
  filter(ProductServices != 'character(0)' & !is.na(ProductServices))

print(paste0("Person nodes with ProductServices not null: ", length(person_nodes_w_pdt_services$id)))
```

## **Simplifying ProductServices in nodes**

As our priority are the fishing-related companies, we will focus on nodes where the type is "Entity.Organization.FishingCompany" (600 nodes).

```{r}
# simplify ProductServices
org_nodes_fishing <- org_nodes %>%
  filter(type == "Entity.Organization.FishingCompany")
```

Since fishing company will not have date of birth (dob), we also remove the dob field from org_nodes_fishing:

```{r}
org_nodes_fishing <- subset(org_nodes_fishing, select = -dob)

#Check for missing values:
print(sum(is.na(org_nodes_fishing)))
```

## Data Visualisations

### **Task 2 - Atypical Business Transactions**

We are going to attempt Task 2:

|                                                                                                                                                                                                         |
|------------------------------------------------------------------------|
| Using your visualizations, find and display examples of typical and atypical business transactions (e.g., mergers, acquisitions, etc.). Can you infer the motivations behind changes in their activity? |

For this task, as we are looking at business transactions such as mergers or acquisitions, etc., we are planning to look at the edges which represent Beneficial Ownership or Shareholdership, and also look into the *start_date* and *end_date* to examine which business transactions are typical and atypical. The idea is to visualize the type of event using the weight of the edges, e.g., Beneficial Ownership may have higher weightage than Shareholdership, and hence appear as a thicker line on the network graph. And use the *start_date* and *end_date* to see the changes in the network graph over time.

The steps are as follows:

1.  In mc3_edges tibble data frame, include weight factor such that Beneficial Ownership has higher weight than Shareholdership. In particular, Beneficial Ownership, Shareholdership, FamilyRelationship, and Works.For will have weightage of 4, 3, 2, and 1 respectively (assuming this is the level of importance of the types of edges)
2.  put both edges and nodes together to construct network graph
3.  Build graph visualisation
4.  Add interactivity (slider) to show changes in network graph over time, using *start_date* and *end_date*. Also add tooltip to be able to see entities which are connected to SouthSeafood Express Corp.

[Step 1:]{.underline}

-   In mc3_edges tibble data frame, include weight factor such that Beneficial Ownership, Shareholdership, FamilyRelationship, and Works.For will have weightage of 4, 3, 2, and 1 respectively.

```{r}
mc3_edges$weight <- ifelse(mc3_edges$type == "Relationship.FamilyRelationship", 2, ifelse(mc3_edges$type == "Event.WorksFor", 1, 
                                                                                          ifelse(mc3_edges$type == "Event.Owns.BeneficialOwnership", 4,
                                                                                                 ifelse(mc3_edges$type == "Event.Owns.Shareholdership", 3, "Not Applicable"))))
```

Since there won't be any edges that fall under "Not Applicable" weight, we can change data type of the weight factor from character to integer:

```{r}
mc3_edges$weight <- as.numeric(mc3_edges$weight)
```

[Step 2:]{.underline}

Before we put both edges and nodes together to construct network graph, we first need to remove missing values in `mc3_edges1`:

```{r}
print(sum(is.na(mc3_edges1)))
```

Upon closer observation, it seems that the missing values come from the *end_date* column. The end_date column contains NA values for Relationship.FamilyRelationship edges, and when the event has not yet ended for Event.Owns.BeneficialOwnership, Event.Owns.Shareholdership, and Event.WorksFor edges.

To analyse atypical business transactions, we want to look more closely into transactions where end_date of a transaction may be the same as the start_date of another transaction. Such a transaction looks fishy and may suggest that something illegal is going on. An example is shown below, where AguaLeska Transit N.V. relinquished shareholdership of SouthSeafood Express Corp on the same day that Tainamarine Fishing Co. assumed shareholdership of SouthSeafood Express Corp:

![](images/clipboard-1704811638.png)

For the above purpose, we can remove rows where the end_date is NA:

```{r}
mc3_edges2 <- mc3_edges1[!is.na(mc3_edges1$end_date), ]

#Check for missing values:
print(sum(is.na(mc3_edges2)))
```

We construct the network graph with the code chunk below:

```{r}
#| eval: false
mc3_graph <- tbl_graph(nodes = org_nodes_fishing,
                       edges = mc3_edges2,
                       directed = FALSE) %>%
  mutate(betweenness_centrality = 
           centrality_betweenness(),
         closeness_centrality = 
           centrality_closeness())
```

[Step 3:]{.underline}

-   Build graph visualisation

```{r}
#| eval: false
mc3_graph %>%
  filter(betweenness_centrality >= 300000) %>%
ggraph(layout = "fr") +
  geom_edge_link(aes(alpha = 0.5)) +
  geom_node_point(aes(
    size = betweenness_centrality,
    colors = "lightblue",
    alpha = 0.5)) +
  scale_size_continuous(range = c(1,10)) +
  theme_graph()
```

### **Task 3**

Next, we are going to attempt Task 3:

|                                                                                                                                                                           |
|------------------------------------------------------------------------|
| Develop a visual approach to examine inferences. Infer how the influence of a company changes through time. Can you infer ownership or influence that a network may have? |

For this task, we are planning to use centrality measures such as betweenness centrality and closeness centrality to measure the influence of a company. The higher the betweenness centrality of a company, the more important the company is in acting as a “bridge” to manage relationships and business transactions between other companies, which suggests that this company has high influence over others as it is highly crucial in facilitating flow of information and/or resources between other companies. Similarly, a company with high closeness centrality suggests that this company has high influence as they are close to many other companies and thus, able to efficiently communicate and spread information quickly.

At the moment, the idea is to have a visualization that looks like [this](https://r4va.netlify.app/chap27#modifying-network-nodes), where the bigger the size of a node, the higher the betweenness/ closeness centrality of the company (i.e., the more influence a company has), with perhaps a slider to measure any changes in the influential companies over time.
