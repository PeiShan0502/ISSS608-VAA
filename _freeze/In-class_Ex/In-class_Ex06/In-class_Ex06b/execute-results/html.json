{
  "hash": "993750ac21d4d573dc6eb8a5fb812afb",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 6b: MC3 Kick-Starter\"\nauthor: Kwok Pei Shan\ndate: \"May 18, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n## Load R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(jsonlite, tidygraph, ggraph,\n               visNetwork, graphlayouts, ggforce,\n               skimr, tidytext, tidyverse)\n```\n:::\n\n\n## Load Data\n\nIn the code chunk below, `fromJSON()` of **jsonlite** package is used to import *MC3.json* into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/MC3.json\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mc3_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"list\"\n```\n:::\n:::\n\n\nThe output is called *mc3_data*. It is a large list R object.\n\n### Extracting edges\n\nThe code chunk below extracts the *links* data.frame of *mc3_data* and save it as a tibble data.frame called *mc3_edges*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges <- \n  as_tibble(mc3_data$links) %>%\n  distinct() %>%\n  mutate(source =\n           as.character(source),\n         target = \n           as.character(target),\n         type =\n           as.character(type)) %>%\n  group_by(source, target, type) %>%\n    summarise(weights = n()) %>%\n  filter(source != target) %>%\n  ungroup()\n```\n:::\n\n\n::: {.callout-note text=\"Things to note\"}\n-   `distinct()`: to ensure that there are no duplicate records. A record is treated as duplicate if the source and target are the same with another record.\n\n-   `as.character(source)`, `as.character(target)`: to avoid potential problems later on, explicitly encode both data types to string/ character data type.\n\n-   `group_by` and `summarise`: to count no. of records between each source and target.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes <- as_tibble(mc3_data$nodes) %>%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = as.character(product_services),\n         revenue_omu = as.numeric(as.character(revenue_omu)),\n         type = as.character(type)) %>%\n  select(id, country, type, revenue_omu, product_services)\n```\n:::\n\n\nWhen we cleaned the nodes data, we removed some of the nodes?? so we have to do this now. left join, so excess ones from mc3_nodes will be left out\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid1 <- mc3_edges %>%\n  select(source) %>%\n  rename(id = source)\n\nid2 <- mc3_edges %>%\n  select(target) %>%\n  rename(id = target)\n\nmc3_nodes1 <- rbind(id1, id2) %>%\n  distinct() %>%\n  left_join(mc3_nodes,\n            unmatched = \"drop\")\n```\n:::\n\n\nfinally construct graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_graph <- tbl_graph(nodes = mc3_nodes1,\n                       edges = mc3_edges,\n                       directed = FALSE) %>%\n  mutate(betweenness_centrality =\n           centrality_betweenness(),\n         closeness_centrality = \n           centrality_closeness())\n```\n:::\n\n\nBuild graph visualisation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_graph %>%\n  filter(betweenness_centrality >= 300000) %>%\nggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha = 0.5)) +\n  geom_node_point(aes(\n    size = betweenness_centrality,\n    colors = \"lightblue\",\n    alpha = 0.5)) +\n  scale_size_continuous(range = c(1,10)) +\n  theme_graph()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-class_Ex06b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}